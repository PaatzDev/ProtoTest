// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: my_super_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MySuperServiceClient is the client API for MySuperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MySuperServiceClient interface {
	ListNotams(ctx context.Context, in *ListNotamsInput, opts ...grpc.CallOption) (*ListNotamsOutput, error)
	AddNotam(ctx context.Context, in *AddNotamInput, opts ...grpc.CallOption) (*AddNotamOutput, error)
}

type mySuperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMySuperServiceClient(cc grpc.ClientConnInterface) MySuperServiceClient {
	return &mySuperServiceClient{cc}
}

func (c *mySuperServiceClient) ListNotams(ctx context.Context, in *ListNotamsInput, opts ...grpc.CallOption) (*ListNotamsOutput, error) {
	out := new(ListNotamsOutput)
	err := c.cc.Invoke(ctx, "/your.service.v1.MySuperService/ListNotams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySuperServiceClient) AddNotam(ctx context.Context, in *AddNotamInput, opts ...grpc.CallOption) (*AddNotamOutput, error) {
	out := new(AddNotamOutput)
	err := c.cc.Invoke(ctx, "/your.service.v1.MySuperService/AddNotam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MySuperServiceServer is the server API for MySuperService service.
// All implementations must embed UnimplementedMySuperServiceServer
// for forward compatibility
type MySuperServiceServer interface {
	ListNotams(context.Context, *ListNotamsInput) (*ListNotamsOutput, error)
	AddNotam(context.Context, *AddNotamInput) (*AddNotamOutput, error)
	mustEmbedUnimplementedMySuperServiceServer()
}

// UnimplementedMySuperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMySuperServiceServer struct {
}

func (UnimplementedMySuperServiceServer) ListNotams(context.Context, *ListNotamsInput) (*ListNotamsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotams not implemented")
}
func (UnimplementedMySuperServiceServer) AddNotam(context.Context, *AddNotamInput) (*AddNotamOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotam not implemented")
}
func (UnimplementedMySuperServiceServer) mustEmbedUnimplementedMySuperServiceServer() {}

// UnsafeMySuperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MySuperServiceServer will
// result in compilation errors.
type UnsafeMySuperServiceServer interface {
	mustEmbedUnimplementedMySuperServiceServer()
}

func RegisterMySuperServiceServer(s grpc.ServiceRegistrar, srv MySuperServiceServer) {
	s.RegisterService(&MySuperService_ServiceDesc, srv)
}

func _MySuperService_ListNotams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotamsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySuperServiceServer).ListNotams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/your.service.v1.MySuperService/ListNotams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySuperServiceServer).ListNotams(ctx, req.(*ListNotamsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySuperService_AddNotam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNotamInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySuperServiceServer).AddNotam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/your.service.v1.MySuperService/AddNotam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySuperServiceServer).AddNotam(ctx, req.(*AddNotamInput))
	}
	return interceptor(ctx, in, info, handler)
}

// MySuperService_ServiceDesc is the grpc.ServiceDesc for MySuperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MySuperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "your.service.v1.MySuperService",
	HandlerType: (*MySuperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNotams",
			Handler:    _MySuperService_ListNotams_Handler,
		},
		{
			MethodName: "AddNotam",
			Handler:    _MySuperService_AddNotam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "my_super_service.proto",
}
